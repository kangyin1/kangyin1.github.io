<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>post</title>
    <link href="/2025/02/19/CUDA%E6%9D%83%E5%A8%81%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/2_CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <url>/2025/02/19/CUDA%E6%9D%83%E5%A8%81%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/2_CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="2-1-CUDA编程模型"><a href="#2-1-CUDA编程模型" class="headerlink" title="2.1 CUDA编程模型"></a>2.1 CUDA编程模型</h2><p>CUDA 编程模型提供一种计算机硬件架构与应用程序之间的抽象。CUDA编程模型利用GPU架构的计算能力提供一下的集中特有功能：</p><ul><li><font style="color:#DF2A3F;">一种层次结构在GPU中组织线程的方法</font></li><li><font style="color:#DF2A3F;">一种通过层次结构在DPU中访问内存的的方法</font></li></ul><p><font style="color:#DF2A3F;">（本书后面的内容将围绕这两点进行学习，其中第2和3章介绍了CUDA组织线程的方法，第4和5章介绍了CUDA的内存模型）</font></p><h3 id="CUDA编程结构"><a href="#CUDA编程结构" class="headerlink" title="CUDA编程结构"></a>CUDA编程结构</h3><p>主机和GPU之间，核函数的的运行时异步的过程，当核函数调用返回后不会阻塞主机程序的执行。</p><h3 id="2-CUDA-内存管理"><a href="#2-CUDA-内存管理" class="headerlink" title="2. CUDA 内存管理"></a>2. CUDA 内存管理</h3><p>CUDA运行时负责分配与释放设备内存，并且在主机内存和设备内存之间传输数据。</p><p><img src="/./source/_posts/2_CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/1723370696800-220b6883-4da6-42e9-aea1-6f414e4cb5a9.png"></p><p><strong>CUDA编程模型的内存层次结构：</strong></p><p>在CUDA编程模型中每个GPU设备都有用于不同用途的存储类型。在GPU的内存层次结构中，最主要的时两种内存结构分别时<font style="color:#2F8EF4;">全局内存</font>和<font style="color:#2F8EF4;">共享内存</font>。全局内存类似CPU的系统内存，共享内存类似于CPU的缓存。共享内存可以由CUDA  C的内核直接控制。</p><p><img src="/./source/_posts/2_CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/1723370764907-7dc0ae8b-cb84-437c-be36-e65cdf17ae3d.png"></p><h3 id="3-线程管理"><a href="#3-线程管理" class="headerlink" title="3. 线程管理"></a>3. 线程管理</h3><p>当核函数启动时，将会被移动到设备上执行。次时设备会产生大量的线程，每个线程都执行由核函数指定的语句。</p><p><img src="/./source/_posts/2_CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/1723371517276-92fc355f-07a5-4da4-ba32-8748a1e67e6c.png"></p><p>网格： 由一个<font style="color:#DF2A3F;">内核启动</font>所产生的所有线程统称为一个网格。同一个网格中的所有线程共享相同的<u>全局内存空间</u>。一个网格由多个线程快构成，一个线程快包含一组线程，同一线程块内线程协作可以通过<font style="color:#2F8EF4;">同步</font>和<font style="color:#2F8EF4;">共享内存</font>实现。不同线程块之间不能协作。线程块依靠一下两个坐标变量来区分批次：</p><ul><li>blockIdx(线程块在线程格内的索引)</li><li>threadIdx(块内的线程索引)</li></ul><p>上面的两个变量时核函数启动时需要初始化的内置变量，CUDA运行时为每个线程分配坐标变量blockIdx和threadIdx。这两个变量是一个三维的坐标，每个坐标里面包含了3个无符号证书结构，可以通过x，y，z三个字段指定。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//checkDimension.cu</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;checkDimension.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function">__global__ <span class="hljs-type">void</span> <span class="hljs-title">checkIndex</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread Idx:(%d, %d, %d)\n&quot;</span>, threadIdx.x, threadIdx.y, threadIdx.z);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;block Idx:(%d, %d, %d)\n&quot;</span>, blockIdx.x, blockIdx.y, blockIdx.z);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;block Dim:(%d, %d, %d)\n&quot;</span>, blockDim.x, blockDim.y, blockDim.z);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;grid Dim:(%d, %d, %d)\n&quot;</span>, gridDim.x, gridDim.y, gridDim.z);<br>&#125;<br><br><span class="hljs-comment">//checkDimension.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CHECK_DIMSENION_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CHECK_DIMSENION_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cuda_runtime.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function">__global__ <span class="hljs-type">void</span> <span class="hljs-title">checkIndex</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* CHECK_DIMSENION_H */</span></span><br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;checkDimension.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cuda_runtime_api.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cuda_runtime.h&gt;</span></span><br><br><span class="hljs-function">__global__ <span class="hljs-type">void</span> <span class="hljs-title">SumOfArray</span><span class="hljs-params">(<span class="hljs-type">int</span>* a ,<span class="hljs-type">int</span>* b,<span class="hljs-type">int</span>* c,<span class="hljs-type">int</span> N)</span></span>&#123;<br>    <span class="hljs-type">int</span> i = threadIdx.x;<br>    c[i] = a[i]+b[i];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        int nElem = 6;</span><br><span class="hljs-comment">        dim3 block(3);</span><br><span class="hljs-comment">        dim3 grid((nElem + block.x - 1) / block.x);</span><br><span class="hljs-comment">        printf(&quot;grid.x: %d, grid.y: %d, grid.z: %d\n&quot;, grid.x, grid.y, grid.z);</span><br><span class="hljs-comment">        printf(&quot;block.x: %d, block.y: %d, block.z: %d\n&quot;, block.x, block.y, block.z);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        checkIndex&lt;&lt;&lt;block, grid&gt;&gt;&gt;();</span><br><span class="hljs-comment">        cudaDeviceReset();*/</span><br>    &#125;<br>    &#123;<br>        <span class="hljs-type">int</span> dev = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">cudaSetDevice</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> N = <span class="hljs-number">32</span>;<br>        <span class="hljs-type">int</span> *a_host = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-type">int</span> *b_host = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-type">int</span> *c_host = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-type">int</span> *a_device = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-type">int</span> *b_device = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-type">int</span> *c_device = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">auto</span> host_ptr_init = [N](<span class="hljs-type">int</span> **p)-&gt;<span class="hljs-type">void</span> &#123;<br>            *p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[N];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;<br>                *(*p+i)= i;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">auto</span> host_ptr_destory = [N](<span class="hljs-type">int</span> *p)-&gt;<span class="hljs-type">void</span>&#123;<br>            <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">nullptr</span>)&#123;<br>                <span class="hljs-keyword">delete</span> [] p;<br>                p = <span class="hljs-literal">nullptr</span>;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">auto</span> dev_ptr_init = [](<span class="hljs-type">int</span> **d)-&gt;<span class="hljs-type">void</span> &#123;<br>            <span class="hljs-built_in">cudaMalloc</span>(d, N*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>        &#125;;<br>        <span class="hljs-keyword">auto</span> dev_ptr_destory = [](<span class="hljs-type">int</span> *d)-&gt;<span class="hljs-type">void</span>&#123;<br>            <span class="hljs-keyword">if</span> (d != <span class="hljs-literal">nullptr</span>) &#123;<br>                <span class="hljs-built_in">cudaFree</span>(d);<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-built_in">host_ptr_init</span>(&amp;a_host);<br>        <span class="hljs-built_in">host_ptr_init</span>(&amp;b_host);<br>        <span class="hljs-built_in">host_ptr_init</span>(&amp;c_host);<br>        <span class="hljs-built_in">dev_ptr_init</span>(&amp;a_device);<br>        <span class="hljs-built_in">dev_ptr_init</span>(&amp;b_device);<br>        <span class="hljs-built_in">dev_ptr_init</span>(&amp;c_device);<br><br>        <span class="hljs-built_in">cudaMemcpy</span>(a_device, a_host, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyHostToDevice);<br>        <span class="hljs-built_in">cudaMemcpy</span>(b_device, b_host, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyHostToDevice);<br>        <span class="hljs-built_in">cudaMemcpy</span>(c_device, c_host, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyHostToDevice);<br><br>        SumOfArray&lt;&lt;&lt;<span class="hljs-number">1</span>,<span class="hljs-number">32</span>&gt;&gt;&gt;(a_device, b_device, c_device, N);<br><br>        <span class="hljs-built_in">cudaMemcpy</span>(c_host, c_device, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyDeviceToHost);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>; i &lt; N; ++i)&#123;<br>            std::cout&lt;&lt;c_host[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        std::cout&lt;&lt;std::endl;<br>        <span class="hljs-built_in">host_ptr_destory</span>(a_host);<br>        <span class="hljs-built_in">host_ptr_destory</span>(b_host);<br>        <span class="hljs-built_in">host_ptr_destory</span>(c_host);<br>        <span class="hljs-built_in">dev_ptr_destory</span>(a_device);<br>        <span class="hljs-built_in">dev_ptr_destory</span>(b_device);<br>        <span class="hljs-built_in">dev_ptr_destory</span>(c_device);<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-2-核函数计时"><a href="#2-2-核函数计时" class="headerlink" title="2.2 核函数计时"></a>2.2 核函数计时</h2><p>使用NVIDIA Nsight Systems对GPU进行性能分析（原书中对nvprof的使用，但是对cuda8以后官方推荐使用NVIDIA Nsight Systems）。</p><p>执行如下命令，获取进程运行时的性能分析报告，然后使用nsight systems打开性能分析报告，如下图：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">nsys profile --output=sum_report ./bin/stage2<br></code></pre></td></tr></table></figure><p><img src="/./source/_posts/2_CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/1723972508902-7521c7e8-9754-41d3-8522-95d46ae1ada7.png"></p><h2 id="2-3-组织并行线程"><a href="#2-3-组织并行线程" class="headerlink" title="2.3 组织并行线程"></a>2.3 组织并行线程</h2><p>下面将使用矩阵的加法的例子说明如何通过快索引和网格组织线程。对于网格和块的用法通常包含以下三种类型：</p><ul><li>使用二维网格和二维块对矩阵求和</li><li>使用一维网格和一维块对矩阵求和</li><li>使用二维网格和一维块对矩阵求和</li></ul><h3 id="使用块和线程建立全局存储的索引"><a href="#使用块和线程建立全局存储的索引" class="headerlink" title="使用块和线程建立全局存储的索引"></a>使用块和线程建立全局存储的索引</h3><p>对于给定的线程，首先可以通过把线程和块索引映射到矩阵坐标上来获取线程块和线程索引的全局内存偏移。然后把这些矩阵坐标映射到全局内存的存储单元。</p><ol><li>建立线程和块索引到矩阵坐标的映射</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ix = threadIdx.x + blockIdx.x + blockDim.x；<br>iy = threadIdx.y + blockIdx.y + blockDim.y；<br></code></pre></td></tr></table></figure><ol start="2"><li>矩阵坐标到全局全局内存的映射</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">idx = iy*nx + ix;<br></code></pre></td></tr></table></figure><p><img src="/./source/_posts/2_CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/1723977111669-6f1c333a-80d0-47b9-9119-24d28b24c019.png"></p><h3 id="使用二维网格和二维块对矩阵求和"><a href="#使用二维网格和二维块对矩阵求和" class="headerlink" title="使用二维网格和二维块对矩阵求和"></a>使用二维网格和二维块对矩阵求和</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&#123;<br>       <span class="hljs-type">int</span> dev = <span class="hljs-number">0</span>;<br>       <span class="hljs-built_in">cudaSetDevice</span>(<span class="hljs-number">0</span>);<br>       <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> NX = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">14</span>;<br>       <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> NY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">14</span>;<br>       <span class="hljs-type">int</span> N = NX * NY;<br>       <span class="hljs-type">int</span> *a_host = <span class="hljs-literal">nullptr</span>;<br>       <span class="hljs-type">int</span> *b_host = <span class="hljs-literal">nullptr</span>;<br>       <span class="hljs-type">int</span> *c_host = <span class="hljs-literal">nullptr</span>;<br>       <span class="hljs-type">int</span> *a_device = <span class="hljs-literal">nullptr</span>;<br>       <span class="hljs-type">int</span> *b_device = <span class="hljs-literal">nullptr</span>;<br>       <span class="hljs-type">int</span> *c_device = <span class="hljs-literal">nullptr</span>;<br>       <span class="hljs-keyword">auto</span> host_ptr_init = [N](<span class="hljs-type">int</span> **p) -&gt; <span class="hljs-type">void</span><br>       &#123;<br>           *p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[N];<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>           &#123;<br>               *(*p + i) = i;<br>           &#125;<br>       &#125;;<br>       <span class="hljs-keyword">auto</span> host_ptr_destory = [N](<span class="hljs-type">int</span> *p) -&gt; <span class="hljs-type">void</span><br>       &#123;<br>           <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">nullptr</span>)<br>           &#123;<br>               <span class="hljs-keyword">delete</span>[] p;<br>               p = <span class="hljs-literal">nullptr</span>;<br>           &#125;<br>       &#125;;<br>       <span class="hljs-keyword">auto</span> dev_ptr_init = [N](<span class="hljs-type">int</span> **d) -&gt; <span class="hljs-type">void</span><br>       &#123;<br>           <span class="hljs-built_in">cudaMalloc</span>(d, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>       &#125;;<br>       <span class="hljs-keyword">auto</span> dev_ptr_destory = [](<span class="hljs-type">int</span> *d) -&gt; <span class="hljs-type">void</span><br>       &#123;<br>           <span class="hljs-keyword">if</span> (d != <span class="hljs-literal">nullptr</span>)<br>           &#123;<br>               <span class="hljs-built_in">cudaFree</span>(d);<br>           &#125;<br>       &#125;;<br><br>       <span class="hljs-built_in">host_ptr_init</span>(&amp;a_host);<br>       <span class="hljs-built_in">host_ptr_init</span>(&amp;b_host);<br>       <span class="hljs-built_in">host_ptr_init</span>(&amp;c_host);<br>       <span class="hljs-built_in">dev_ptr_init</span>(&amp;a_device);<br>       <span class="hljs-built_in">dev_ptr_init</span>(&amp;b_device);<br>       <span class="hljs-built_in">dev_ptr_init</span>(&amp;c_device);<br><br>       <span class="hljs-built_in">cudaMemcpy</span>(a_device, a_host, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyHostToDevice);<br>       <span class="hljs-built_in">cudaMemcpy</span>(b_device, b_host, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyHostToDevice);<br>       <span class="hljs-built_in">cudaMemcpy</span>(c_device, c_host, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyHostToDevice);<br><br>       <span class="hljs-type">int</span> dimX = <span class="hljs-number">32</span>;<br>       <span class="hljs-type">int</span> dimY = <span class="hljs-number">32</span>;<br>       <span class="hljs-function">dim3 <span class="hljs-title">block</span><span class="hljs-params">(dimX, dimY)</span></span>;<br>       <span class="hljs-function">dim3 <span class="hljs-title">grid</span><span class="hljs-params">((NX + block.x - <span class="hljs-number">1</span>) / block.x,</span></span><br><span class="hljs-params"><span class="hljs-function">                 (NY + block.y - <span class="hljs-number">1</span>) / block.y)</span></span>;<br>       SumOfMatrix2D&lt;&lt;&lt;grid, block&gt;&gt;&gt;(a_device, b_device, c_device, NX, NY);<br>       <span class="hljs-built_in">cudaDeviceSynchronize</span>();<br>       <span class="hljs-built_in">cudaMemcpy</span>(c_host, c_device, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyDeviceToHost);<br><br>       <span class="hljs-comment">// for(int i =0; i &lt; N; ++i)&#123;</span><br>       <span class="hljs-comment">//     std::cout&lt;&lt;c_host[i]&lt;&lt;&quot; &quot;;</span><br>       <span class="hljs-comment">// &#125;</span><br>       <span class="hljs-comment">// std::cout&lt;&lt;std::endl;</span><br>       <span class="hljs-built_in">host_ptr_destory</span>(a_host);<br>       <span class="hljs-built_in">host_ptr_destory</span>(b_host);<br>       <span class="hljs-built_in">host_ptr_destory</span>(c_host);<br>       <span class="hljs-built_in">dev_ptr_destory</span>(a_device);<br>       <span class="hljs-built_in">dev_ptr_destory</span>(b_device);<br>       <span class="hljs-built_in">dev_ptr_destory</span>(c_device);<br>   &#125; &#123;<br>       <span class="hljs-type">int</span> dev = <span class="hljs-number">0</span>;<br>       <span class="hljs-built_in">cudaSetDevice</span>(<span class="hljs-number">0</span>);<br>       <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> NX = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">14</span>;<br>       <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> NY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">14</span>;<br>       <span class="hljs-type">int</span> N = NX * NY;<br>       <span class="hljs-type">int</span> *a_host = <span class="hljs-literal">nullptr</span>;<br>       <span class="hljs-type">int</span> *b_host = <span class="hljs-literal">nullptr</span>;<br>       <span class="hljs-type">int</span> *c_host = <span class="hljs-literal">nullptr</span>;<br>       <span class="hljs-type">int</span> *a_device = <span class="hljs-literal">nullptr</span>;<br>       <span class="hljs-type">int</span> *b_device = <span class="hljs-literal">nullptr</span>;<br>       <span class="hljs-type">int</span> *c_device = <span class="hljs-literal">nullptr</span>;<br>       <span class="hljs-keyword">auto</span> host_ptr_init = [N](<span class="hljs-type">int</span> **p) -&gt; <span class="hljs-type">void</span><br>       &#123;<br>           *p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[N];<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>           &#123;<br>               *(*p + i) = i;<br>           &#125;<br>       &#125;;<br>       <span class="hljs-keyword">auto</span> host_ptr_destory = [N](<span class="hljs-type">int</span> *p) -&gt; <span class="hljs-type">void</span><br>       &#123;<br>           <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">nullptr</span>)<br>           &#123;<br>               <span class="hljs-keyword">delete</span>[] p;<br>               p = <span class="hljs-literal">nullptr</span>;<br>           &#125;<br>       &#125;;<br>       <span class="hljs-keyword">auto</span> dev_ptr_init = [N](<span class="hljs-type">int</span> **d) -&gt; <span class="hljs-type">void</span><br>       &#123;<br>           <span class="hljs-built_in">cudaMalloc</span>(d, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>       &#125;;<br>       <span class="hljs-keyword">auto</span> dev_ptr_destory = [](<span class="hljs-type">int</span> *d) -&gt; <span class="hljs-type">void</span><br>       &#123;<br>           <span class="hljs-keyword">if</span> (d != <span class="hljs-literal">nullptr</span>)<br>           &#123;<br>               <span class="hljs-built_in">cudaFree</span>(d);<br>           &#125;<br>       &#125;;<br><br>       <span class="hljs-built_in">host_ptr_init</span>(&amp;a_host);<br>       <span class="hljs-built_in">host_ptr_init</span>(&amp;b_host);<br>       <span class="hljs-built_in">host_ptr_init</span>(&amp;c_host);<br>       <span class="hljs-built_in">dev_ptr_init</span>(&amp;a_device);<br>       <span class="hljs-built_in">dev_ptr_init</span>(&amp;b_device);<br>       <span class="hljs-built_in">dev_ptr_init</span>(&amp;c_device);<br><br>       <span class="hljs-built_in">cudaMemcpy</span>(a_device, a_host, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyHostToDevice);<br>       <span class="hljs-built_in">cudaMemcpy</span>(b_device, b_host, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyHostToDevice);<br>       <span class="hljs-built_in">cudaMemcpy</span>(c_device, c_host, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyHostToDevice);<br><br>       <span class="hljs-type">int</span> dimX = <span class="hljs-number">32</span>;<br>       <span class="hljs-type">int</span> dimY = <span class="hljs-number">32</span>;<br>       <span class="hljs-function">dim3 <span class="hljs-title">block</span><span class="hljs-params">(dimX, dimY)</span></span>;<br>       <span class="hljs-function">dim3 <span class="hljs-title">grid</span><span class="hljs-params">((NX + block.x - <span class="hljs-number">1</span>) / block.x,</span></span><br><span class="hljs-params"><span class="hljs-function">                 (NY + block.y - <span class="hljs-number">1</span>) / block.y)</span></span>;<br>       SumOfMatrix2D&lt;&lt;&lt;grid, block&gt;&gt;&gt;(a_device, b_device, c_device, NX, NY);<br>       <span class="hljs-built_in">cudaDeviceSynchronize</span>();<br>       <span class="hljs-built_in">cudaMemcpy</span>(c_host, c_device, N * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>), cudaMemcpyDeviceToHost);<br><br>       <span class="hljs-comment">// for(int i =0; i &lt; N; ++i)&#123;</span><br>       <span class="hljs-comment">//     std::cout&lt;&lt;c_host[i]&lt;&lt;&quot; &quot;;</span><br>       <span class="hljs-comment">// &#125;</span><br>       <span class="hljs-comment">// std::cout&lt;&lt;std::endl;</span><br>       <span class="hljs-built_in">host_ptr_destory</span>(a_host);<br>       <span class="hljs-built_in">host_ptr_destory</span>(b_host);<br>       <span class="hljs-built_in">host_ptr_destory</span>(c_host);<br>       <span class="hljs-built_in">dev_ptr_destory</span>(a_device);<br>       <span class="hljs-built_in">dev_ptr_destory</span>(b_device);<br>       <span class="hljs-built_in">dev_ptr_destory</span>(c_device);<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="使用一维网格和一维块对矩阵求和"><a href="#使用一维网格和一维块对矩阵求和" class="headerlink" title="使用一维网格和一维块对矩阵求和"></a>使用一维网格和一维块对矩阵求和</h3><h3 id="使用二维网格和一维块对矩阵求和"><a href="#使用二维网格和一维块对矩阵求和" class="headerlink" title="使用二维网格和一维块对矩阵求和"></a>使用二维网格和一维块对矩阵求和</h3><h2 id="2-4-设备管理"><a href="#2-4-设备管理" class="headerlink" title="2.4 设备管理"></a>2.4 设备管理</h2><ol><li>NVIDIA提供了函数和指令查询GPU的信息。</li></ol><ul><li>使用如下函数可以查看GPU的信息</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cudaError_t<br></code></pre></td></tr></table></figure><ul><li>使用nvidia-smi可以查看GPU的运行信息</li></ul><ol start="2"><li><p>确定最佳的GPU</p></li><li><p>通过设置环境变量<code>CUDA_VISIBLE_DEVICES</code>可以设置GPU的可见性。例如：如果只使用编号为2的GPU,可以设置<code>CUDA_VISIBLE_DEVICES</code>&#x3D;2，就可以屏蔽其他编号的GPU。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    
    <categories>
      
      <category>cuda编程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cyberRT之协程调度</title>
    <link href="/2025/02/19/cyberRT%E4%B9%8B%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6/"/>
    <url>/2025/02/19/cyberRT%E4%B9%8B%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>apollo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cyberRT之协程原理</title>
    <link href="/2025/02/19/cyberRT%E4%B9%8B%E5%8D%8F%E7%A8%8B%E5%8E%9F%E7%90%86/"/>
    <url>/2025/02/19/cyberRT%E4%B9%8B%E5%8D%8F%E7%A8%8B%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="一、协程"><a href="#一、协程" class="headerlink" title="一、协程"></a>一、协程</h1><p>协程是用户态的线程，本质上是一段可以挂起和恢复的函数。协程按照协程运行时是否需要栈可以分为<strong>有栈协程</strong>和<strong>无栈协程</strong>，按照在调度过程中，根据协程调度权的目标，又可以将协程分为<strong>对称协程</strong>和<strong>非对称协程</strong>。<br>有栈协程：每个协程都有自己的调用栈，类似于线程的调用栈。可以在任意的函数点可以通过将函数的栈帧、寄存器、程序指针压入栈中，实现切换。</p><p>无栈协程：协程没有自己的调用栈，挂起点的状态通过状态机或闭包等语法来实现。</p><ul><li>基于状态机的解决方案一般是通过状态机，记录上次协程挂起时的位置，并基于此决定协程恢复时开始执行的位置。这个状态必须存储在栈以外的地方，从而避免状态与栈一同销毁。</li></ul><p>对称协程：任何一个协程都是相互独立且平等的，调度权可以在任意协程之间转移</p><p>非对称协程：协程出让调度权的目标只能是它的调用者，即协程之间存在调用和被调用关系。</p><p>CybrtRT中的协程是有栈和非对称的协程。</p><h1 id="二、CyberRT的协程切换"><a href="#二、CyberRT的协程切换" class="headerlink" title="二、CyberRT的协程切换"></a>二、CyberRT的协程切换</h1><h1 id="三、参考文档"><a href="#三、参考文档" class="headerlink" title="三、参考文档"></a>三、参考文档</h1><p><a href="https://www.cnblogs.com/luoganttcc/p/16603567.html">https://www.cnblogs.com/luoganttcc/p/16603567.html</a></p><p><a href="https://blog.csdn.net/lizhipengcsdn/article/details/131236278">https://blog.csdn.net/lizhipengcsdn/article/details/131236278</a></p>]]></content>
    
    
    <categories>
      
      <category>apollo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>gcc下C++对象的内存布局</title>
    <link href="/2025/02/16/gcc%E4%B8%8BC-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/"/>
    <url>/2025/02/16/gcc%E4%B8%8BC-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="gdbgdb查看对象布局的设置"><a href="#gdbgdb查看对象布局的设置" class="headerlink" title="gdbgdb查看对象布局的设置"></a>gdbgdb查看对象布局的设置</h1><p>这里主要使用以下的几个命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">(gdb) set print object on<br>(gdb) set print vtbl on<br>(gdb) set print pretty on<br></code></pre></td></tr></table></figure><h1 id="C-对象布局"><a href="#C-对象布局" class="headerlink" title="C++对象布局"></a>C++对象布局</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123; <span class="hljs-comment">//line 168</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">A</span>()&#123;  <br><br>&#125;<br><span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y ):<span class="hljs-built_in">a1</span>(x),<span class="hljs-built_in">a2</span>(y)&#123; <span class="hljs-comment">//line 173</span><br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestA</span><span class="hljs-params">()</span></span>&#123;     <span class="hljs-comment">//line 176</span><br>    std::cout&lt;&lt;<span class="hljs-string">&quot;TestA&quot;</span>&lt;&lt;std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span>&#123;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;A::func1&quot;</span>&lt;&lt;std::endl;<br>&#125;<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">A</span>()&#123;<br>    std::cout&lt;&lt;<span class="hljs-string">&quot;A析构函数&quot;</span>&lt;&lt;std::endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">get_static_mem</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> static_mem;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> a1;<br><span class="hljs-type">int</span> a2;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> static_mem;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs stylus">(gdb) <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">a</span><br>$<span class="hljs-number">24</span> = (A *) <span class="hljs-number">0</span>x55555556aeb0<br><br>(gdb)  <span class="hljs-selector-tag">p</span> *<span class="hljs-selector-tag">a</span><br>$<span class="hljs-number">16</span> = (A) &#123;<br>  _vptr<span class="hljs-selector-class">.A</span> = <span class="hljs-number">0</span>x555555557d20 &lt;vtable <span class="hljs-keyword">for</span> A+<span class="hljs-number">16</span>&gt;,<br>  a1 = <span class="hljs-number">1</span>,<br>  a2 = <span class="hljs-number">2</span>,<br>  static static_mem = <span class="hljs-number">0</span><br>&#125;<br><br>(gdb) <span class="hljs-selector-tag">p</span> &amp;<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.a1</span>  <br>$<span class="hljs-number">18</span> = (int *) <span class="hljs-number">0</span>x55555556aeb8<br>(gdb) <span class="hljs-selector-tag">p</span> &amp;<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.a2</span><br>$<span class="hljs-number">19</span> = (int *) <span class="hljs-number">0</span>x55555556aebc<br>(gdb) <span class="hljs-selector-tag">p</span> &amp;A::static_mem<br>$<span class="hljs-number">20</span> = (int *) <span class="hljs-number">0</span>x555555558194 &lt;A::static_mem&gt;<br><br>(gdb) info <span class="hljs-selector-tag">symbol</span> <span class="hljs-number">0</span>x555555557d20<br>vtable <span class="hljs-keyword">for</span> A + <span class="hljs-number">16</span> <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.rel</span><span class="hljs-selector-class">.ro</span> of /home/ycon/workspace/cpp_test/build/test<br><br>(gdb) info vtbl <span class="hljs-selector-tag">a</span><br>vtable <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;A&#x27;</span> @ <span class="hljs-number">0</span>x555555557d20 (subobject @ <span class="hljs-number">0</span>x55555556aeb0):<br><span class="hljs-selector-attr">[0]</span>: <span class="hljs-number">0</span>x5555555554fa &lt;A::<span class="hljs-built_in">func1</span>()&gt;<br><br>(gdb) info <span class="hljs-selector-tag">symbol</span> <span class="hljs-number">0</span>x5555555554fa<br>A::<span class="hljs-built_in">func1</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br><br>(gdb) <span class="hljs-selector-tag">p</span> /<span class="hljs-selector-tag">a</span> *(void (**)())<span class="hljs-number">0</span>x555555557d20<br>$<span class="hljs-number">21</span> = <span class="hljs-number">0</span>x5555555554fa &lt;_ZN1A5func1Ev&gt;<br>(gdb) info <span class="hljs-selector-tag">symbol</span> _ZN1A5func1Ev<br>A::<span class="hljs-built_in">func1</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br><br><br>(gdb) info <span class="hljs-selector-tag">line</span> <span class="hljs-number">168</span><br>Line <span class="hljs-number">168</span> of <span class="hljs-string">&quot;/home/ycon/workspace/cpp_test/main.cpp&quot;</span> is at <span class="hljs-selector-tag">address</span> <span class="hljs-number">0</span>x5555555554c2 &lt;_ZN1AC2Eii&gt; but contains no <span class="hljs-selector-tag">code</span>.<br>(gdb) info <span class="hljs-selector-tag">symbol</span> _ZN1AC2Eii<br>A::<span class="hljs-built_in">A</span>(int, int) <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br>(gdb) info <span class="hljs-selector-tag">line</span> <span class="hljs-number">173</span><br>Line <span class="hljs-number">173</span> of <span class="hljs-string">&quot;/home/ycon/workspace/cpp_test/main.cpp&quot;</span> starts at <span class="hljs-selector-tag">address</span> <span class="hljs-number">0</span>x5555555554c2 &lt;_ZN1AC2Eii&gt; and ends at <span class="hljs-number">0</span>x5555555554d4 &lt;_ZN1AC2Eii+<span class="hljs-number">18</span>&gt;.<br><br><br>(gdb) info <span class="hljs-selector-tag">line</span> <span class="hljs-number">176</span><br>Line <span class="hljs-number">176</span> of <span class="hljs-string">&quot;/home/ycon/workspace/cpp_test/main.cpp&quot;</span> is at <span class="hljs-selector-tag">address</span> <span class="hljs-number">0</span>x5555555554fa &lt;_ZN1A5func1Ev&gt; but contains no <span class="hljs-selector-tag">code</span>.<br>(gdb) info <span class="hljs-selector-tag">symbol</span> _ZN1A5func1Ev<br>A::<span class="hljs-built_in">func1</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br><br>(gdb) info <span class="hljs-selector-tag">line</span> <span class="hljs-number">182</span><br>Line <span class="hljs-number">182</span> of <span class="hljs-string">&quot;/home/ycon/workspace/cpp_test/main.cpp&quot;</span> starts at <span class="hljs-selector-tag">address</span> <span class="hljs-number">0</span>x555555555538 &lt;_ZN1AD2Ev&gt; and ends at <span class="hljs-number">0</span>x555555555548 &lt;_ZN1AD2Ev+<span class="hljs-number">16</span>&gt;.<br>(gdb) info <span class="hljs-selector-tag">symbol</span> _ZN1AD2Ev<br>A::~<span class="hljs-built_in">A</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br><br>(gdb) <span class="hljs-selector-tag">p</span> &amp;A::static_mem<br>$<span class="hljs-number">23</span> = (int *) <span class="hljs-number">0</span>x555555558194 &lt;A::static_mem&gt;<br>(gdb) info <span class="hljs-selector-tag">symbol</span> <span class="hljs-number">0</span>x555555558194<br>A::static_mem <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.bss</span> of /home/ycon/workspace/cpp_test/build/test<br></code></pre></td></tr></table></figure><p><img src="/../../../../../source/_posts/source/_posts/gcc%E4%B8%8BC-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/image1.png"></p><h2 id="单继承下类的内存结构"><a href="#单继承下类的内存结构" class="headerlink" title="单继承下类的内存结构"></a>单继承下类的内存结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    A* a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">A</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    B* b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">B</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>    A* a1 = b;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs stylus">(gdb) <span class="hljs-selector-tag">p</span> a1<br>$<span class="hljs-number">1</span> = (A *) <span class="hljs-number">0</span>x55555556aed0<br>(gdb) <span class="hljs-selector-tag">p</span> *a1<br>$<span class="hljs-number">2</span> = &#123;_vptr<span class="hljs-selector-class">.A</span> = <span class="hljs-number">0</span>x555555557cd8 &lt;vtable <span class="hljs-keyword">for</span> B+<span class="hljs-number">16</span>&gt;, a1 = <span class="hljs-number">0</span>, a2 = <span class="hljs-number">0</span>, static static_mem = <span class="hljs-number">0</span>&#125;<br>(gdb) <span class="hljs-selector-tag">p</span> *<span class="hljs-selector-tag">b</span><br>$<span class="hljs-number">3</span> = &#123;&lt;A&gt; = &#123;_vptr<span class="hljs-selector-class">.A</span> = <span class="hljs-number">0</span>x555555557cd8 &lt;vtable <span class="hljs-keyword">for</span> B+<span class="hljs-number">16</span>&gt;, a1 = <span class="hljs-number">0</span>, a2 = <span class="hljs-number">0</span>, static static_mem = <span class="hljs-number">0</span>&#125;, b1 = <span class="hljs-number">3</span>, b2 = <span class="hljs-number">4</span>&#125;<br>(gdb) <span class="hljs-selector-tag">p</span> &amp;a1<span class="hljs-selector-class">.b1</span><br>There is no member or method named b1.<br>(gdb) <span class="hljs-selector-tag">p</span> &amp;(a1-&gt;b1)<br>There is no member or method named b1.<br>(gdb) <span class="hljs-selector-tag">p</span> &amp;(b-&gt;b1)<br>$<span class="hljs-number">4</span> = (int *) <span class="hljs-number">0</span>x55555556aee0<br>(gdb) <span class="hljs-selector-tag">p</span> &amp;(b-&gt;b2)<br>$<span class="hljs-number">5</span> = (int *) <span class="hljs-number">0</span>x55555556aee4<br><br>$<span class="hljs-number">5</span> = (int *) <span class="hljs-number">0</span>x55555556aee4<br>(gdb) info <span class="hljs-selector-tag">symbol</span> <span class="hljs-number">0</span>x55555556aed0<br>No <span class="hljs-selector-tag">symbol</span> matches <span class="hljs-number">0</span>x55555556aed0.<br>(gdb) info <span class="hljs-selector-tag">symbol</span> <span class="hljs-number">0</span>x555555557cd8<br>vtable <span class="hljs-keyword">for</span> B + <span class="hljs-number">16</span> <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.rel</span><span class="hljs-selector-class">.ro</span> of /home/ycon/workspace/cpp_test/build/test<br><br>(gdb) info vtbl <span class="hljs-selector-tag">a</span><br>vtable <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;A&#x27;</span> @ <span class="hljs-number">0</span>x555555557d08 (subobject @ <span class="hljs-number">0</span>x55555556aeb0):<br><span class="hljs-selector-attr">[0]</span>: <span class="hljs-number">0</span>x555555555542 &lt;A::<span class="hljs-built_in">func1</span>()&gt;<br><br>vtable <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;A&#x27;</span> @ <span class="hljs-number">0</span>x555555557cd8 (subobject @ <span class="hljs-number">0</span>x55555556aed0):<br><span class="hljs-selector-attr">[0]</span>: <span class="hljs-number">0</span>x555555555644 &lt;B::<span class="hljs-built_in">func1</span>()&gt;<br>(gdb) info vtbl <span class="hljs-selector-tag">b</span> <br>vtable <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;B&#x27;</span> @ <span class="hljs-number">0</span>x555555557cd8 (subobject @ <span class="hljs-number">0</span>x55555556aed0):<br><span class="hljs-selector-attr">[0]</span>: <span class="hljs-number">0</span>x555555555644 &lt;B::<span class="hljs-built_in">func1</span>()&gt;<br><span class="hljs-selector-attr">[1]</span>: <span class="hljs-number">0</span>x5555555556c0 &lt;B::~<span class="hljs-built_in">B</span>()&gt;<br><span class="hljs-selector-attr">[2]</span>: <span class="hljs-number">0</span>x555555555718 &lt;B::~<span class="hljs-built_in">B</span>()&gt;<br><span class="hljs-selector-attr">[3]</span>: <span class="hljs-number">0</span>x555555555682 &lt;B::<span class="hljs-built_in">func2</span>()&gt;<br>(gdb) info <span class="hljs-selector-tag">symbol</span> <span class="hljs-number">0</span>x555555557cd8<br>vtable <span class="hljs-keyword">for</span> B + <span class="hljs-number">16</span> <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.rel</span><span class="hljs-selector-class">.ro</span> of /home/ycon/workspace/cpp_test/build/test<br>(gdb) info <span class="hljs-selector-tag">symbol</span> <span class="hljs-number">0</span>x55555556aed0<br>No <span class="hljs-selector-tag">symbol</span> matches <span class="hljs-number">0</span>x55555556aed0.<br>(gdb)  <span class="hljs-selector-tag">p</span> /<span class="hljs-selector-tag">a</span> *(void (**)())<span class="hljs-number">0</span>x555555557cd8<br>$<span class="hljs-number">6</span> = <span class="hljs-number">0</span>x555555555644 &lt;_ZN1B5func1Ev&gt;<br>(gdb) info <span class="hljs-selector-tag">symbol</span> _ZN1B5func1Ev<br>B::<span class="hljs-built_in">func1</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br>(gdb)  <span class="hljs-selector-tag">p</span> /<span class="hljs-selector-tag">a</span> *(void (**)())(<span class="hljs-number">0</span>x555555557cd8+<span class="hljs-number">8</span>)<br>$<span class="hljs-number">7</span> = <span class="hljs-number">0</span>x5555555556c0 &lt;_ZN1BD2Ev&gt;<br>(gdb) info <span class="hljs-selector-tag">symbol</span> _ZN1BD2Ev<br>B::~<span class="hljs-built_in">B</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br>(gdb)  <span class="hljs-selector-tag">p</span> /<span class="hljs-selector-tag">a</span> *(void (**)())(<span class="hljs-number">0</span>x555555557cd8+<span class="hljs-number">16</span>)<br>$<span class="hljs-number">8</span> = <span class="hljs-number">0</span>x555555555718 &lt;_ZN1BD0Ev&gt;<br>(gdb) info <span class="hljs-selector-tag">symbol</span> _ZN1BD0Ev<br>B::~<span class="hljs-built_in">B</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br>(gdb) info <span class="hljs-selector-tag">symbol</span> <span class="hljs-number">0</span>x555555555682<br>B::<span class="hljs-built_in">func2</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br>(gdb) info <span class="hljs-selector-tag">symbol</span> <span class="hljs-number">0</span>x555555555718<br>B::~<span class="hljs-built_in">B</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br><br>(gdb) info <span class="hljs-selector-tag">line</span> <span class="hljs-number">194</span><br>Line <span class="hljs-number">194</span> of <span class="hljs-string">&quot;/home/ycon/workspace/cpp_test/main.cpp&quot;</span> is at <span class="hljs-selector-tag">address</span> <span class="hljs-number">0</span>x5555555555fc &lt;_ZN1BC2Eii&gt; but contains no <span class="hljs-selector-tag">code</span>.<br>(gdb) info <span class="hljs-selector-tag">symbol</span> _ZN1BC2Eii<br>B::<span class="hljs-built_in">B</span>(int, int) <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br><br>(gdb) info <span class="hljs-selector-tag">line</span> <span class="hljs-number">199</span> <br>Line <span class="hljs-number">199</span> of <span class="hljs-string">&quot;/home/ycon/workspace/cpp_test/main.cpp&quot;</span> starts at <span class="hljs-selector-tag">address</span> <span class="hljs-number">0</span>x5555555555fc &lt;_ZN1BC2Eii&gt; and ends at <span class="hljs-number">0</span>x555555555612 &lt;_ZN1BC2Eii+<span class="hljs-number">22</span>&gt;.<br>(gdb) info <span class="hljs-selector-tag">symbol</span> <span class="hljs-number">0</span>x555555555612<br>B::<span class="hljs-built_in">B</span>(int, int) + <span class="hljs-number">22</span> <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br><br>(gdb) info <span class="hljs-selector-tag">line</span> <span class="hljs-number">202</span><br>Line <span class="hljs-number">202</span> of <span class="hljs-string">&quot;/home/ycon/workspace/cpp_test/main.cpp&quot;</span> is at <span class="hljs-selector-tag">address</span> <span class="hljs-number">0</span>x555555555644 &lt;_ZN1B5func1Ev&gt; but contains no <span class="hljs-selector-tag">code</span>.<br>(gdb) info <span class="hljs-selector-tag">symbol</span> _ZN1B5func1Ev<br>B::<span class="hljs-built_in">func1</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br><br><br></code></pre></td></tr></table></figure><p><img src="/image2.png"></p><h2 id="多继承下类的内存结构"><a href="#多继承下类的内存结构" class="headerlink" title="多继承下类的内存结构"></a>多继承下类的内存结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">A</span>()&#123;<br><br>    &#125;<br>    <span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y ):<span class="hljs-built_in">a1</span>(x),<span class="hljs-built_in">a2</span>(y)&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestA</span><span class="hljs-params">()</span></span>&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;TestA&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span></span>&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;A::func1&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">A</span>()&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;A析构函数&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">get_static_mem</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> static_mem;<br>    &#125;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">int</span> a1;<br>    <span class="hljs-type">int</span> a2;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> static_mem;<br>&#125;;<br><span class="hljs-type">int</span> A::static_mem = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">E</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">E</span>()&#123;<br><br>    &#125;<br>    <span class="hljs-built_in">E</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y):<span class="hljs-built_in">e1</span>(x),<span class="hljs-built_in">e2</span>(y)&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func_E1</span><span class="hljs-params">()</span></span>&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;E::func_E1&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func_E2</span><span class="hljs-params">()</span></span>&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;E::func_E2&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">E</span>()&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;E析构函数&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">int</span> e1;<br>    <span class="hljs-type">int</span> e2;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span>:<span class="hljs-keyword">public</span> E,<span class="hljs-keyword">public</span> A&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">F</span>()&#123;<br><br>    &#125;<br>    <span class="hljs-built_in">F</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y):<span class="hljs-built_in">f1</span>(x),<span class="hljs-built_in">f2</span>(y)&#123;<br>        <span class="hljs-built_in">A</span>(x*<span class="hljs-number">2</span>,y*<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">E</span>(x*<span class="hljs-number">3</span>,y*<span class="hljs-number">3</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;  <span class="hljs-comment">//重写A的虚函数</span><br>        std::cout&lt;&lt;<span class="hljs-string">&quot;F::func1&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func_E2</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123; <span class="hljs-comment">//重写E的虚函数</span><br>        std::cout&lt;&lt;<span class="hljs-string">&quot;F::func_E2&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func_F1</span><span class="hljs-params">()</span></span>&#123;   <span class="hljs-comment">//自己的虚函数</span><br>        std::cout&lt;&lt;<span class="hljs-string">&quot;F::func_F1&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>    ~<span class="hljs-built_in">F</span>()&#123;<br>        std::cout&lt;&lt;<span class="hljs-string">&quot;F析构函数&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">int</span> f1;<br>    <span class="hljs-type">int</span> f2;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    A* a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">A</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    B* b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">B</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>    A* a_b = b;<br><br>    C* c = <span class="hljs-keyword">new</span> <span class="hljs-built_in">C</span>(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br>    A* a_c = c;<br><br>    D* d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">D</span>(<span class="hljs-number">7</span>,<span class="hljs-number">8</span>);<br><br>    B* b_d = d;<br>    C* c_d = d;<br><br>    E* e = <span class="hljs-keyword">new</span> <span class="hljs-built_in">E</span>(<span class="hljs-number">9</span>,<span class="hljs-number">10</span>);<br>    F* f = <span class="hljs-keyword">new</span> <span class="hljs-built_in">F</span>(<span class="hljs-number">11</span>,<span class="hljs-number">12</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-comment">/* code */</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs stylus">(gdb) <span class="hljs-selector-tag">p</span> *f<br>$<span class="hljs-number">1</span> = &#123;&lt;E&gt; = &#123;_vptr<span class="hljs-selector-class">.E</span> = <span class="hljs-number">0</span>x55555555a928 &lt;vtable <span class="hljs-keyword">for</span> F+<span class="hljs-number">16</span>&gt;, e1 = <span class="hljs-number">0</span>, e2 = <span class="hljs-number">0</span>&#125;, &lt;A&gt; = &#123;_vptr<span class="hljs-selector-class">.A</span> = <span class="hljs-number">0</span>x55555555a968 &lt;vtable <span class="hljs-keyword">for</span> F+<span class="hljs-number">80</span>&gt;, a1 = <span class="hljs-number">0</span>, a2 = <span class="hljs-number">0</span>, static static_mem = <span class="hljs-number">0</span>&#125;, f1 = <span class="hljs-number">11</span>, f2 = <span class="hljs-number">12</span>&#125;<br>(gdb) <span class="hljs-selector-tag">p</span> f<br>$<span class="hljs-number">2</span> = (F *) <span class="hljs-number">0</span>x55555556e3a0<br>(gdb) <span class="hljs-selector-tag">p</span> &amp;(f-&gt;f1)<br>$<span class="hljs-number">3</span> = (int *) <span class="hljs-number">0</span>x55555556e3c0<br>(gdb) <span class="hljs-selector-tag">p</span> &amp;(f-&gt;f2)<br>$<span class="hljs-number">4</span> = (int *) <span class="hljs-number">0</span>x55555556e3c4<br>(gdb) <span class="hljs-selector-tag">p</span> &amp;(f-&gt;e1)<br>$<span class="hljs-number">5</span> = (int *) <span class="hljs-number">0</span>x55555556e3a8<br>(gdb) <span class="hljs-selector-tag">p</span> &amp;(f-&gt;e2)<br>$<span class="hljs-number">6</span> = (int *) <span class="hljs-number">0</span>x55555556e3ac<br>(gdb) <span class="hljs-selector-tag">p</span> &amp;(f-&gt;a1)<br>$<span class="hljs-number">7</span> = (int *) <span class="hljs-number">0</span>x55555556e3b8<br>(gdb) <span class="hljs-selector-tag">p</span> &amp;(f-&gt;a2)<br>$<span class="hljs-number">8</span> = (int *) <span class="hljs-number">0</span>x55555556e3bc<br>info<br>(gdb) info vtbl <span class="hljs-number">0</span>x55555555a968<br>This <span class="hljs-selector-tag">object</span> does not have <span class="hljs-selector-tag">a</span> virtual function <span class="hljs-selector-tag">table</span><br>(gdb) info vtbl f<br>vtable <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;F&#x27;</span> @ <span class="hljs-number">0</span>x55555555a928 (subobject @ <span class="hljs-number">0</span>x55555556e3a0):<br><span class="hljs-selector-attr">[0]</span>: <span class="hljs-number">0</span>x555555556d5c &lt;E::<span class="hljs-built_in">func_E1</span>()&gt;<br><span class="hljs-selector-attr">[1]</span>: <span class="hljs-number">0</span>x555555556f78 &lt;F::<span class="hljs-built_in">func_E2</span>()&gt;<br><span class="hljs-selector-attr">[2]</span>: <span class="hljs-number">0</span>x555555556ff4 &lt;F::~<span class="hljs-built_in">F</span>()&gt;<br><span class="hljs-selector-attr">[3]</span>: <span class="hljs-number">0</span>x555555557078 &lt;F::~<span class="hljs-built_in">F</span>()&gt;<br><span class="hljs-selector-attr">[4]</span>: <span class="hljs-number">0</span>x555555556f30 &lt;F::<span class="hljs-built_in">func1</span>()&gt;<br><span class="hljs-selector-attr">[5]</span>: <span class="hljs-number">0</span>x555555556fb6 &lt;F::<span class="hljs-built_in">func_F1</span>()&gt;<br><br>vtable <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;A&#x27;</span> @ <span class="hljs-number">0</span>x55555555a968 (subobject @ <span class="hljs-number">0</span>x55555556e3b0):<br><span class="hljs-selector-attr">[0]</span>: <span class="hljs-number">0</span>x555555556f6e &lt;non-virtual thunk to F::<span class="hljs-built_in">func1</span>()&gt;<br><br><br>(gdb) info <span class="hljs-selector-tag">symbol</span> <span class="hljs-number">0</span>x555555556d5c <br>E::<span class="hljs-built_in">func_E1</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br>(gdb) info <span class="hljs-selector-tag">symbol</span> <span class="hljs-number">0</span>x555555556f6e<br>non-virtual thunk to F::<span class="hljs-built_in">func1</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br><br><br>(gdb) <span class="hljs-selector-tag">p</span> *f<br>$<span class="hljs-number">9</span> = &#123;&lt;E&gt; = &#123;_vptr<span class="hljs-selector-class">.E</span> = <span class="hljs-number">0</span>x55555555a928 &lt;vtable <span class="hljs-keyword">for</span> F+<span class="hljs-number">16</span>&gt;, e1 = <span class="hljs-number">0</span>, e2 = <span class="hljs-number">0</span>&#125;, &lt;A&gt; = &#123;_vptr<span class="hljs-selector-class">.A</span> = <span class="hljs-number">0</span>x55555555a968 &lt;vtable <span class="hljs-keyword">for</span> F+<span class="hljs-number">80</span>&gt;, a1 = <span class="hljs-number">0</span>, a2 = <span class="hljs-number">0</span>, static static_mem = <span class="hljs-number">0</span>&#125;, f1 = <span class="hljs-number">11</span>, f2 = <span class="hljs-number">12</span>&#125;<br>(gdb) info <span class="hljs-selector-tag">symbol</span> <span class="hljs-number">0</span>x55555555a928<br>vtable <span class="hljs-keyword">for</span> F + <span class="hljs-number">16</span> <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.rel</span><span class="hljs-selector-class">.ro</span> of /home/ycon/workspace/cpp_test/build/test<br>(gdb) <span class="hljs-selector-tag">p</span> /<span class="hljs-selector-tag">a</span> *(void (**)())<span class="hljs-number">0</span>x55555555a928<br>$<span class="hljs-number">10</span> = <span class="hljs-number">0</span>x555555556d5c &lt;_ZN1E7func_E1Ev&gt;<br>(gdb) info <span class="hljs-selector-tag">symbol</span> _ZN1E7func_E1Ev<br>E::<span class="hljs-built_in">func_E1</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br>(gdb) <span class="hljs-selector-tag">p</span> /<span class="hljs-selector-tag">a</span> *(void (**)())<span class="hljs-number">0</span>x55555555a968<br>$<span class="hljs-number">11</span> = <span class="hljs-number">0</span>x555555556f6e &lt;_ZThn16_N1F5func1Ev&gt;<br>(gdb) info <span class="hljs-selector-tag">symbol</span> _ZThn16_N1F5func1Ev<br>non-virtual thunk to F::<span class="hljs-built_in">func1</span>() <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">section</span> <span class="hljs-selector-class">.text</span> of /home/ycon/workspace/cpp_test/build/test<br></code></pre></td></tr></table></figure><p><img src="/./gcc%E4%B8%8BC-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/image3.png"></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://mainvooid.github.io/posts/GDB%E6%9F%A5%E7%9C%8BC++%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html">https://mainvooid.github.io/posts/GDB%E6%9F%A5%E7%9C%8BC++%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.html</a></p><p><a href="https://blog.csdn.net/Howl_1/article/details/122917471">https://blog.csdn.net/Howl_1/article/details/122917471</a></p>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
